import pandas as pd
baseball= pd.read_csv('2019_kbo_for_kaggle_v2.csv')
frame=pd.DataFrame(baseball)
baseball=pd.DataFrame(baseball)

#1번
def sort_dataset(dataset_df):
	#TODO: Implement this function
	  result=baseball.sort_values(by='year',ascending=False)
	  print(result)

	  #2번
	  def split_dataset(dataset_df):	
	  	#TODO: Implement this function
		  from sklearn.model_selection import train_test_split
		    X_train, X_test, y_train, y_test= train_test_split(X,  baseball.year*0.001, test_size=0.1)
		    print(X_train.shape)
		    print(X_test.shape)
		    print(y_train.shape)
		    print(y_test.shape)

		    #3번
		    def extract_numerical_cols(dataset_df):
		    	#TODO: Implement this function
			  global baseball
			    baseball=pd.DataFrame(baseball, columns=['age','G','PA','AB','R','H','2B','3B','HR','RBI','SB','CS','BB','HBP','SO','GDP','fly','war'])
			      return baseball
			      baseball=extract_numerical_cols(baseball)
			      print(baseball)

			      #4번
			      def train_predict_decision_tree(X_train, Y_train, X_test):
			      	#TODO: Implement this function
				  from sklearn.tree import DecisionTreeClassifier
				    dt_cls=DecisionTreeClassifier()
				      dt_cls.fit(X_train,y_train)

				        print(accuracy_score(y_test,dt_cls.predict(X_test)))
					  print(confusion_matrix(y_test,dt_cls.predict(X_test)))

					  #5번
					  def train_predict_random_forest(X_train, Y_train, X_test):
					  	#TODO: Implement this function
						  rf_cls=RandomForestClassifier()
						    rf_cls.fit(X_train,y_train)

						      print(accuracy_score(rf_cls.predict(X_test),y_test))
						        print(confusion_matrix(y_test,rf_cls.predict(X_test)))

							#6번
							def train_predict_svm(X_train, Y_train, X_test):
								#TODO: Implement this function
								  from sklearn.pipeline import make_pipeline
								    from sklearn.svm import SVC
								      svm_pipe=make_pipeline(
								            StandardScaler(),
									          SVC()
										    )
										      svm_pipe.fit(X_train,y_train)

										        print(accuracy_score(y_test,svm_pipe.predict(X_test)))
											  print(confusion_matrix(y_test,svm_pipe.predict(X_test)))
											  #7번
											  def calculate_RMSE(labels, predictions):
											  	#TODO: Implement this function
												  from sklearn.pipeline import make_pipeline
												    from sklearn.metrics import mean_squared_error

												      from sklearn.ensemble import RandomForestRegressor
												        X_train, X_test, y_train, y_test= train_test_split(X,y,test_size=0.1, random_state=2)
													  rf_reg=RandomForestRegressor()
													    rf_reg.fit(X_train,y_train)
													      import numpy as np  
													        predicted=rf_reg.predict(X.test)
														  print ("RMSE:", np.sqrt(np.mean((predicted-y_test)**2)))


														  if __name__=='__main__':
														  	#DO NOT MODIFY THIS FUNCTION UNLESS PATH TO THE CSV MUST BE CHANGED.
																data_df = pd.read_csv('2019_kbo_for_kaggle_v2.csv')
																	
																		sorted_df = sort_dataset(data_df)	
																			X_train, X_test, Y_train, Y_test = split_dataset(sorted_df)
																				
																					X_train = extract_numerical_cols(X_train)
																						X_test = extract_numerical_cols(X_test)

																							dt_predictions = train_predict_decision_tree(X_train, Y_train, X_test)
																								rf_predictions = train_predict_random_forest(X_train, Y_train, X_test)
																									svm_predictions = train_predict_svm(X_train, Y_train, X_test)
																										
																											print ("Decision Tree Test RMSE: ", calculate_RMSE(Y_test, dt_predictions))	
																												print ("Random Forest Test RMSE: ", calculate_RMSE(Y_test, rf_predictions))	
																													print ("SVM Test RMSE: ", calculate_RMSE(Y_test, svm_predictions))
